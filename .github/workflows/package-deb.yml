name: Debian Package Creation and Publication as Release
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
    workflow_dispatch:
        inputs:
            previous:
                description: 'Previous tag'
                required: false
            base_ref:
                description: 'Base ref'
                required: false
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
    package-deb:
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.version.outputs.release }}
        steps:
            -
                name: Install jq
                uses: awalsh128/cache-apt-pkgs-action@latest
                with:
                    packages: jq
            -
                name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
                    ref: ${{ github.event.ref }}
            -
                name: Setup Go
                uses: actions/setup-go@v5
                with:
                    go-version: '1.23.x'
            -
                id: go-releaser
                name: Run GoReleaser
                uses: goreleaser/goreleaser-action@v6
                with:
                    # either 'goreleaser' (default) or 'goreleaser-pro'
                    distribution: goreleaser
                    # 'latest', 'nightly', or a semver
                    version: '~> v2'
                    #args: release --rm-dist --clean --snapshot
                    args: release -f .goreleaser.yml --clean --snapshot
                # env:
                #     # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
                #     GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
            -
                name: Show artifacts
                run: echo '${{ steps.go-releaser.outputs.artifacts }}' | jq
            -
                id: version
                name: Get package version from latest (current or prior) tag
                run: |
                    # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
                    # [epoch:]upstream_version[-debian_revision]
                    #echo "upstream_version=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_revision=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\2|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_version=$(git describe | sed -E 's|^v*(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "::set-output name=release::$(git describe)"
                    echo "release=$(git describe)" | tee -a "$GITHUB_OUTPUT"
            -
                id: prepare-deb
                name: Prepare package content
                run: |
                    # main program
                    mkdir -p .debpkg/usr/bin
                    cp $(echo '${{ steps.go-releaser.outputs.artifacts }}' | jq -r '.[] | select(.name == "myhome") | .path') .debpkg/usr/bin/myhome

                    # systemd script as a shared file
                    mkdir -p .debpkg/usr/share/myhome
                    cp linux/debian/myhome.service .debpkg/usr/share/myhome/myhome.service

                    # create DEBIAN directory if you want to add other pre/post scripts
                    mkdir -p .debpkg/DEBIAN
                    cp linux/debian/postinst.sh .debpkg/DEBIAN/postinst
                    chmod +x .debpkg/DEBIAN/postinst
            -
                id: build-deb
                name: Build Debian Package
                uses: jiro4989/build-deb-action@v4
                with:
                    package: myhome
                    package_root: .debpkg
                    maintainer: Francois-Xavier 'FiX' KOWALSKI <fix.kowalski@gmail.com>
                    # `https://hub.docker.com/r/jiro4989/build-deb-action` wants format like version: refs/tags/v*.*.*
                    version: refs/tags/${{ steps.version.outputs.release }}
                    arch: 'arm64' # optional
                    depends: 'libc6 (>= 2.2.1), systemd' # optional
                    desc: 'MyHome Automation.' # optional
                    homepage: 'https://github.com/asnowfix/home-automation' # optional
            -
                name: Release
                id: release
                uses: ncipollo/release-action@v1
                with:
                    name: Release ${{ steps.version.outputs.release }}
                    artifactErrorsFailBuild: true
                    artifacts: "${{ steps.build-deb.outputs.file_name }},README.md"
                    #bodyFile: CHANGELOG.md
                    tag: ${{ steps.version.outputs.release }}
                    prerelease: true
                    draft: true
                    replacesArtifacts: true
                    generateReleaseNotes: true