name: Package and Release
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
on:
  workflow_dispatch:
    inputs:
      previous:
        description: 'Previous ref/tag'
        required: true
jobs:
  package-deb:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release }}
      deb_file: ${{ steps.build-deb.outputs.file_name }}
      bin_arm64: ${{ steps.shape-artifacts.outputs.bin_arm64 }}
    steps:
      - name: Install jq
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: jq
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.ref }}
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
      - id: go-releaser
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          #args: release --rm-dist --clean --snapshot
          args: release -f .goreleaser.yml --clean --snapshot
          # env:
          #     # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          #     GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Shape artifacts
        id: shape-artifacts
        run: |
          set -x
          echo "${{ steps.go-releaser.outputs.artifacts }}" | jq
          entry=$(echo "${{ steps.go-releaser.outputs.artifacts }}" | jq -cr '.[] | select(.name == "myhome") | .')
          echo "entry=$entry"
          file=$(echo "$entry" | jq -cr '.name')-$(echo "$entry" | jq -cr '.os')-$(echo "$entry" | jq -cr '.arch')
          echo "file=$file"
          cp $(echo "$entry" | jq -cr '.path') $file
          echo "bin_arm64=$file" | tee -a $GITHUB_OUTPUT
      - id: version
        name: Get package version from latest (current or prior) tag
        run: |
          # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
          # [epoch:]upstream_version[-debian_revision]
          #echo "upstream_version=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
          #echo "debian_revision=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\2|g')" | tee -a $GITHUB_OUTPUT
          #echo "debian_version=$(git describe | sed -E 's|^v*(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
          #echo "::set-output name=release::$(git describe)"
          echo "release=$(git describe)" | tee -a "$GITHUB_OUTPUT"
      - id: upload-myhome-arm64-artifact
        name: Upload MyHome ARM64 binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin_arm64
          path: ${{ steps.shape-artifacts.outputs.bin_arm64 }}
      - id: prepare-deb
        name: Prepare package content
        run: |
          # main program
          mkdir -p .debpkg/usr/bin
          cp ${{ steps.shape-artifacts.outputs.bin_arm64 }} .debpkg/usr/bin/myhome

          # systemd scripts
          mkdir -p .debpkg/lib/systemd/system/
          cp linux/debian/myhome.service .debpkg/lib/systemd/system/
          cp linux/debian/myhome-update.service .debpkg/lib/systemd/system/
          cp linux/debian/myhome-update.timer .debpkg/lib/systemd/system/

          # auto-update script as a shared file
          mkdir -p .debpkg/usr/share/myhome/update
          cp linux/debian/update.sh .debpkg/usr/share/myhome/update.sh
          chmod +x .debpkg/usr/share/myhome/update.sh

          # create DEBIAN directory if you want to add other pre/post scripts
          mkdir -p .debpkg/DEBIAN
          cp linux/debian/postinst.sh .debpkg/DEBIAN/postinst
          chmod +x .debpkg/DEBIAN/postinst
      - id: build-deb
        name: Build Debian Package
        uses: jiro4989/build-deb-action@v4
        with:
          package: myhome
          package_root: .debpkg
          maintainer: Francois-Xavier 'FiX' KOWALSKI <fix.kowalski@gmail.com>
          # `https://hub.docker.com/r/jiro4989/build-deb-action` wants format like version: refs/tags/v*.*.*
          version: refs/tags/${{ steps.version.outputs.release }}
          arch: 'arm64' # optional
          depends: 'libc6 (>= 2.2.1), systemd, jq, curl' # optional
          desc: 'MyHome Automation.' # optional
          homepage: 'https://github.com/asnowfix/home-automation' # optional
      - name: Upload MyHome DEB as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb_file
          path: ${{ steps.build-deb.outputs.file_name }}
  package-msi:
    runs-on: windows-latest
    outputs:
      release_version: ${{ steps.version.outputs.release }}
      msi_file: ${{ steps.build-msi.outputs.msi_file }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.ref }}
      - id: version
        name: Get package version from latest (current or prior) tag
        run: "$tag = (git describe) -replace '^v',''\nAdd-Content -Path $env:GITHUB_OUTPUT -Value \"release=$tag\"\n$version = $tag -split '\\.' \nAdd-Content -Path $env:GITHUB_OUTPUT -Value \"version_major=$($version[0])\"\nAdd-Content -Path $env:GITHUB_OUTPUT -Value \"version_minor=$($version[1])\"\nAdd-Content -Path $env:GITHUB_OUTPUT -Value \"version_patch=$($version[2])\"\n"
      - id: install-go
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.0
      - id: build
        name: Build Windows Exectutable
        run: go build -o "myhome.exe" ".\\myhome"
      - name: Install ImageMagick
        id: install-imagemagick
        run: choco install imagemagick.app -y
      - name: Convert SVG to ICO
        run: |
          magick convert "assets/penates.svg" -define icon:auto-resize=256,128,64,48,32,16 "assets/penates.ico"
      # - 
      #     name: Install WiXToolset
      #     id: install-wix
      #     run: |
      #         if (-not (Test-Path "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe")) {
      #             choco install wixtoolset --version=3.14.0.6526 -y --force
      #         } else {
      #             Write-Host "WiX Toolset is already installed"
      #         }
      - id: install-go-msi
        name: Install go-msi
        run: choco install go-msi
      - id: wix-version
        name: Set version in wix.json
        run: |
          $json = Get-Content .\wix.json | ConvertFrom-Json
          $json.'version' = "${{ steps.version.outputs.release }}"
          $json.'version-major' = ${{ steps.version.outputs.version_major }}
          $json.'version-minor' = ${{ steps.version.outputs.version_minor }}
          $json.'version-patch' = ${{ steps.version.outputs.version_patch }}
          $json.upgrade.'version-max' = "${{ steps.version.outputs.release }}"
          $json | ConvertTo-Json -Depth 10 | Set-Content .\wix.build.json
      - id: build-msi
        name: Build Windows Installer MSI from exe file
        env:
          Path: "C:\\Windows\\System32;$env:Path;C:\\Program Files\\go-msi;C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;C:\\Program Files (x86)\\Wix Toolset v3.14"
        run: |
          $out = New-Item -Type Directory -Path . -Name "msi_build"
          $msi = "MyHome-${{ steps.version.outputs.release }}.msi"
          go-msi make --msi "$out\$msi" --path .\wix.build.json --arch amd64 --license .\LICENSE --out $out --keep
          Copy-Item "$out\$msi" -Destination "."
          Get-Item $msi
          Add-Content -Path $env:GITHUB_OUTPUT -Value "msi_file=$msi"
      - name: Install Windows SDK
        run: |
          choco install windows-sdk-10.1
      - id: sign
        name: Sign MSI Package
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: "try {\n    Write-Host \"Starting certificate processing...\"\n    \n    # Validate certificate data\n    if ([string]::IsNullOrWhiteSpace($env:CERTIFICATE_BASE64)) {\n        throw \"Certificate data is empty\"\n    }\n    \n    Write-Host \"Certificate data length: $($env:CERTIFICATE_BASE64.Length) characters\"\n    \n    # Clean potential issues with base64 string\n    $cleanBase64 = $env:CERTIFICATE_BASE64 -replace '\\s+',''\n    Write-Host \"Cleaned certificate data length: $($cleanBase64.Length) characters\"\n    \n    # Set certificate path before any operations\n    $certPath = $null\n    \n    # Validate base64 format\n    try {\n        $certBytes = [Convert]::FromBase64String($cleanBase64)\n        Write-Host \"Base64 decoded successfully. Byte length: $($certBytes.Length)\"\n        \n        # Validate minimum PFX size (typically at least 1KB)\n        if ($certBytes.Length -lt 1024) {\n            throw \"Decoded certificate data is too small to be a valid PFX file\"\n        }\n        \n        # Ensure temp directory exists\n        $tempDir = [System.IO.Path]::GetTempPath()\n        if (-not (Test-Path $tempDir)) {\n            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null\n        }\n        \n        # Create certificate path\n        $certFileName = [System.Guid]::NewGuid().ToString() + \".pfx\"\n        $certPath = [System.IO.Path]::Combine($tempDir, $certFileName)\n        Write-Host \"Will write certificate to: $certPath\"\n        \n        # Write certificate to file\n        [IO.File]::WriteAllBytes($certPath, $certBytes)\n        \n        if (-not (Test-Path $certPath)) {\n            throw \"Failed to create certificate file at $certPath\"\n        }\n        \n        $fileInfo = Get-Item $certPath\n        Write-Host \"Certificate file created successfully:\"\n        Write-Host \"  Path: $certPath\"\n        Write-Host \"  Size: $($fileInfo.Length) bytes\"\n        Write-Host \"  Last Write Time: $($fileInfo.LastWriteTime)\"\n        \n        # Try loading certificate with explicit flags\n        $flags = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable -bor \n                [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet -bor \n                [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet\n        \n        Write-Host \"Attempting to load certificate...\"\n        \n        # Try alternative loading methods if the first one fails\n        try {\n            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certPath, $env:CERTIFICATE_PASSWORD, $flags)\n        }\n        catch {\n            Write-Host \"First certificate loading attempt failed: $_\"\n            Write-Host \"Trying alternative loading method...\"\n            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n            $cert.Import($certPath, $env:CERTIFICATE_PASSWORD, $flags)\n        }\n        \n        Write-Host \"Certificate loaded successfully.\"\n        Write-Host \"Certificate Subject: $($cert.Subject)\"\n        Write-Host \"Certificate Issuer: $($cert.Issuer)\"\n        Write-Host \"Certificate Valid From: $($cert.NotBefore)\"\n        Write-Host \"Certificate Valid To: $($cert.NotAfter)\"\n        Write-Host \"Has Private Key: $($cert.HasPrivateKey)\"\n        Write-Host \"Certificate Thumbprint: $($cert.Thumbprint)\"\n        \n        if (-not $cert.HasPrivateKey) {\n            throw \"Certificate does not contain a private key\"\n        }\n        \n        $cert.Dispose()\n        \n        # Sign the MSI using Windows SDK SignTool\n        Write-Host \"Starting MSI signing process...\"\n        $signtool = \"${env:ProgramFiles(x86)}\\Windows Kits\\10\\bin\\10.0.17763.0\\x64\\signtool.exe\"\n        Write-Host \"SignTool path: $signtool\"\n        \n        Write-Host \"MSI file to sign: ${{ steps.build-msi.outputs.msi_file }}\"\n        \n        # Try signing with more detailed output\n        $result = & $signtool sign /v /debug /f $certPath /p $env:CERTIFICATE_PASSWORD /fd sha256 /tr http://timestamp.digicert.com /td sha256 \"${{ steps.build-msi.outputs.msi_file }}\" 2>&1\n        Write-Host \"SignTool Output: $result\"\n        \n        if ($LASTEXITCODE -ne 0) {\n            Write-Error \"SignTool failed with exit code $LASTEXITCODE\"\n            Write-Error $result\n            throw \"Signing failed\"\n        }\n        \n        Write-Host \"Package signed successfully\"\n    }\n    catch {\n        Write-Error \"Failed during certificate processing: $_\"\n        throw\n    }\n    finally {\n        # Safe cleanup\n        if (-not [string]::IsNullOrWhiteSpace($certPath) -and (Test-Path $certPath)) {\n            Write-Host \"Cleaning up certificate file...\"\n            Remove-Item -Path $certPath -Force -ErrorAction SilentlyContinue\n            Write-Host \"Cleanup completed\"\n        }\n    }\n}\ncatch {\n    Write-Error \"Error during signing process: $_\"\n    Write-Host \"Exception details: $($_.Exception.Message)\"\n    Write-Host \"Stack trace: $($_.Exception.StackTrace)\"\n    throw\n}\nfinally {\n    if (Test-Path $certPath) {\n        Remove-Item $certPath -Force\n        Write-Host \"Certificate file cleaned up\"\n    }\n}\n"
      - name: Upload MyHome MSI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: msi_file
          path: |
            ${{ steps.build-msi.outputs.msi_file }}
  release:
    runs-on: ubuntu-latest
    needs:
      - package-deb
      - package-msi
    steps:
      - if: github.event.inputs.previous == ''
        id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        id: release_notes
        uses: gableroux/generate-github-release-notes@v0.1.2
        with:
          repository: ${{ github.repository }}
          base_tag: "${{ github.event.inputs.previous }}"
          head_tag: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download MyHome MSI from package-msi
        uses: actions/download-artifact@v4
        with:
          name: msi_file
      - name: Download MyHome DEB from package-deb
        uses: actions/download-artifact@v4
        with:
          name: deb_file
      - name: Download MyHome ARM64 from package-release
        uses: actions/download-artifact@v4
        with:
          name: bin_arm64
      - name: List files in workspace
        run: ls -alR
      - name: Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ needs.package-deb.outputs.release_version }}
          artifactErrorsFailBuild: true
          artifacts: "${{ needs.package-deb.outputs.deb_file }},${{ needs.package-deb.outputs.bin_arm64 }},${{ needs.package-msi.outputs.msi_file }}"
          body: ${{ steps.release_notes.outputs.notes }}
          #tag: ${{ needs.package-deb.outputs.release_version }}-rc${{ github.run_number }}
          tag: ${{ needs.package-deb.outputs.release_version }}
          prerelease: false # beta, rc
          draft: true # confirmation in the UI
          replacesArtifacts: true
          #generateReleaseNotes: true
