name: Package and Release
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
    workflow_dispatch:
        inputs:
            previous:
                description: 'Previous ref/tag'
                required: true

jobs:
    package-deb:
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.version.outputs.release }}
            deb_file: ${{ steps.build-deb.outputs.file_name }}
        steps:
            -
                name: Install jq
                uses: awalsh128/cache-apt-pkgs-action@latest
                with:
                    packages: jq
            -
                name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
                    ref: ${{ github.event.ref }}
            -
                name: Setup Go
                uses: actions/setup-go@v5
                with:
                    go-version: '1.23.x'
            -
                id: go-releaser
                name: Run GoReleaser
                uses: goreleaser/goreleaser-action@v6
                with:
                    # either 'goreleaser' (default) or 'goreleaser-pro'
                    distribution: goreleaser
                    # 'latest', 'nightly', or a semver
                    version: '~> v2'
                    #args: release --rm-dist --clean --snapshot
                    args: release -f .goreleaser.yml --clean --snapshot
                # env:
                #     # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
                #     GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
            -
                name: Show artifacts
                run: echo '${{ steps.go-releaser.outputs.artifacts }}' | jq
            -
                id: version
                name: Get package version from latest (current or prior) tag
                run: |
                    # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
                    # [epoch:]upstream_version[-debian_revision]
                    #echo "upstream_version=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_revision=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\2|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_version=$(git describe | sed -E 's|^v*(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "::set-output name=release::$(git describe)"
                    echo "release=$(git describe)" | tee -a "$GITHUB_OUTPUT"
            -
                id: prepare-deb
                name: Prepare package content
                run: |
                    # main program
                    mkdir -p .debpkg/usr/bin
                    cp $(echo '${{ steps.go-releaser.outputs.artifacts }}' | jq -r '.[] | select(.name == "myhome") | .path') .debpkg/usr/bin/myhome

                    # systemd scripts
                    mkdir -p .debpkg/lib/systemd/system/
                    cp linux/debian/myhome.service .debpkg/lib/systemd/system/
                    cp linux/debian/myhome-update.service .debpkg/lib/systemd/system/
                    cp linux/debian/myhome-update.timer .debpkg/lib/systemd/system/

                    # auto-update script as a shared file
                    mkdir -p .debpkg/usr/share/myhome/update
                    cp linux/debian/update.sh .debpkg/usr/share/myhome/update.sh
                    chmod +x .debpkg/usr/share/myhome/update.sh

                    # create DEBIAN directory if you want to add other pre/post scripts
                    mkdir -p .debpkg/DEBIAN
                    cp linux/debian/postinst.sh .debpkg/DEBIAN/postinst
                    chmod +x .debpkg/DEBIAN/postinst
            -
                id: build-deb
                name: Build Debian Package
                uses: jiro4989/build-deb-action@v4
                with:
                    package: myhome
                    package_root: .debpkg
                    maintainer: Francois-Xavier 'FiX' KOWALSKI <fix.kowalski@gmail.com>
                    # `https://hub.docker.com/r/jiro4989/build-deb-action` wants format like version: refs/tags/v*.*.*
                    version: refs/tags/${{ steps.version.outputs.release }}
                    arch: 'arm64' # optional
                    depends: 'libc6 (>= 2.2.1), systemd, jq, curl' # optional
                    desc: 'MyHome Automation.' # optional
                    homepage: 'https://github.com/asnowfix/home-automation' # optional
            -
                name: Upload MyHome DEB as artifact
                uses: actions/upload-artifact@v4
                with:
                    name: deb_file
                    path: ${{ steps.build-deb.outputs.file_name }}
    package-msi:
        runs-on: windows-latest
        outputs:
            release_version: ${{ steps.version.outputs.release }}
            msi_file: ${{ steps.build-msi.outputs.msi_file }}
        steps:
            - 
                name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
                    ref: ${{ github.event.ref }}
            -
                id: version
                name: Get package version from latest (current or prior) tag
                run: |
                    $tag = (git describe) -replace '^v',''
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "release=$tag"
                    $version = $tag -split '\.' 
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "version_major=$($version[0])"
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "version_minor=$($version[1])"
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "version_patch=$($version[2])"
            - 
                id: install-go
                name: Set up Go
                uses: actions/setup-go@v5
                with:
                    go-version: 1.23.0
            - 
                id: build
                name: Build Windows Exectutable
                run: go build -o "myhome.exe" ".\\myhome"
            -
                name: Install ImageMagick
                id: install-imagemagick
                run: choco install imagemagick.app -y
            -
                name: Convert SVG to ICO
                run: |
                    magick convert "assets/penates.svg" -define icon:auto-resize=256,128,64,48,32,16 "assets/penates.ico"
            # - 
            #     name: Install WiXToolset
            #     id: install-wix
            #     run: |
            #         if (-not (Test-Path "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe")) {
            #             choco install wixtoolset --version=3.14.0.6526 -y --force
            #         } else {
            #             Write-Host "WiX Toolset is already installed"
            #         }
            - 
                id: install-go-msi
                name: Install go-msi
                run: choco install go-msi
            -
                id: wix-version
                name: Set version in wix.json
                run: |
                    $json = Get-Content .\wix.json | ConvertFrom-Json
                    $json.'version' = "${{ steps.version.outputs.release }}"
                    $json.'version-major' = ${{ steps.version.outputs.version_major }}
                    $json.'version-minor' = ${{ steps.version.outputs.version_minor }}
                    $json.'version-patch' = ${{ steps.version.outputs.version_patch }}
                    $json.upgrade.'version-max' = "${{ steps.version.outputs.release }}"
                    $json | ConvertTo-Json -Depth 10 | Set-Content .\wix.build.json
            -
                id: build-msi
                name: Build Windows Installer MSI from exe file
                env:
                    Path: "C:\\Windows\\System32;$env:Path;C:\\Program Files\\go-msi;C:\\Program Files (x86)\\WiX Toolset v3.14\\bin;C:\\Program Files (x86)\\Wix Toolset v3.14"
                run: |
                    $out = New-Item -Type Directory -Path . -Name "msi_build"
                    $msi = "MyHome-${{ steps.version.outputs.release }}.msi"
                    go-msi make --msi "$out\$msi" --path .\wix.build.json --arch amd64 --license .\LICENSE --out $out --keep
                    Copy-Item "$out\$msi" -Destination "."
                    Get-Item $msi
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "msi_file=$msi"
            - 
                name: Install Windows SDK
                run: |
                    choco install windows-sdk-10-version-2004-windbg
            - 
                id: sign
                name: Sign MSI Package
                env:
                    CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
                    CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
                run: |
                    try {
                        Write-Host "Starting certificate processing..."
                        
                        # Validate certificate data
                        if ([string]::IsNullOrWhiteSpace($env:CERTIFICATE_BASE64)) {
                            throw "Certificate data is empty"
                        }
                        
                        Write-Host "Certificate data length: $($env:CERTIFICATE_BASE64.Length) characters"
                        
                        # Clean potential issues with base64 string
                        $cleanBase64 = $env:CERTIFICATE_BASE64 -replace '\s+',''
                        Write-Host "Cleaned certificate data length: $($cleanBase64.Length) characters"
                        
                        # Validate base64 format
                        try {
                            $certBytes = [Convert]::FromBase64String($cleanBase64)
                            Write-Host "Base64 decoded successfully. Byte length: $($certBytes.Length)"
                            
                            # Validate minimum PFX size (typically at least 1KB)
                            if ($certBytes.Length -lt 1024) {
                                throw "Decoded certificate data is too small to be a valid PFX file"
                            }
                        }
                        catch [FormatException] {
                            throw "Invalid base64 format in certificate data"
                        }
                        
                        # Write certificate to file
                        $certPath = Join-Path $env:TEMP "certificate.pfx"
                        [IO.File]::WriteAllBytes($certPath, $certBytes)
                        
                        $fileInfo = Get-Item $certPath
                        Write-Host "Certificate file written to: $certPath"
                        Write-Host "Certificate file size: $($fileInfo.Length) bytes"
                        Write-Host "Certificate file last write time: $($fileInfo.LastWriteTime)"
                        
                        # Try loading certificate with explicit flags
                        $flags = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable -bor 
                                [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet -bor 
                                [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet
                        
                        Write-Host "Attempting to load certificate..."
                        
                        # Try alternative loading methods if the first one fails
                        try {
                            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certPath, $env:CERTIFICATE_PASSWORD, $flags)
                        }
                        catch {
                            Write-Host "First certificate loading attempt failed: $_"
                            Write-Host "Trying alternative loading method..."
                            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
                            $cert.Import($certPath, $env:CERTIFICATE_PASSWORD, $flags)
                        }
                        
                        Write-Host "Certificate loaded successfully."
                        Write-Host "Certificate Subject: $($cert.Subject)"
                        Write-Host "Certificate Issuer: $($cert.Issuer)"
                        Write-Host "Certificate Valid From: $($cert.NotBefore)"
                        Write-Host "Certificate Valid To: $($cert.NotAfter)"
                        Write-Host "Has Private Key: $($cert.HasPrivateKey)"
                        Write-Host "Certificate Thumbprint: $($cert.Thumbprint)"
                        
                        if (-not $cert.HasPrivateKey) {
                            throw "Certificate does not contain a private key"
                        }
                        
                        $cert.Dispose()
                        
                        # Sign the MSI using Windows SDK SignTool
                        Write-Host "Starting MSI signing process..."
                        $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe"
                        Write-Host "SignTool path: $signtool"
                        
                        Write-Host "MSI file to sign: ${{ steps.build-msi.outputs.msi_file }}"
                        
                        # Try signing with more detailed output
                        $result = & $signtool sign /v /debug /f $certPath /p $env:CERTIFICATE_PASSWORD /fd sha256 /tr http://timestamp.digicert.com /td sha256 "${{ steps.build-msi.outputs.msi_file }}" 2>&1
                        Write-Host "SignTool Output: $result"
                        
                        if ($LASTEXITCODE -ne 0) {
                            Write-Error "SignTool failed with exit code $LASTEXITCODE"
                            Write-Error $result
                            throw "Signing failed"
                        }
                        
                        Write-Host "Package signed successfully"
                    }
                    catch {
                        Write-Error "Error during signing process: $_"
                        Write-Host "Exception details: $($_.Exception.Message)"
                        Write-Host "Stack trace: $($_.Exception.StackTrace)"
                        throw
                    }
                    finally {
                        if (Test-Path $certPath) {
                            Remove-Item $certPath -Force
                            Write-Host "Certificate file cleaned up"
                        }
                    }
            -
                name: Upload MyHome MSI as artifact
                uses: actions/upload-artifact@v4
                with:
                    name: msi_file
                    path: |
                        ${{ steps.build-msi.outputs.msi_file }}
    release:
        runs-on: ubuntu-latest
        needs:
            - package-deb
            - package-msi
        steps:
            -
                if: github.event.inputs.previous == ''
                id: checkout
                name: Checkout
                uses: actions/checkout@v4
                with:
                  fetch-depth: 0    
            -
                name: Generate Release Notes
                id: release_notes
                uses: gableroux/generate-github-release-notes@v0.1.2
                with:
                    repository: ${{ github.repository }}
                    base_tag: "${{ github.event.inputs.previous }}"
                    head_tag: ${{ github.ref }}
                    github_token: ${{ secrets.GITHUB_TOKEN }}
            -
                name: Download MyHome MSI from package-msi
                uses: actions/download-artifact@v4
                with:
                    name: msi_file
                    #path: ${{ needs.package-msi.outputs.msi_file }}
            -
                name: Download MyHome DEB from package-deb
                uses: actions/download-artifact@v4
                with:
                    name: deb_file
                    #path: ${{ needs.package-deb.outputs.deb_file }}
            -
                name: List files in workspace
                run: ls -al
            -
                name: Release
                id: release
                uses: ncipollo/release-action@v1
                with:
                    name: Release ${{ needs.package-deb.outputs.release_version }}
                    artifactErrorsFailBuild: true
                    artifacts: "${{ needs.package-deb.outputs.deb_file }},${{ needs.package-msi.outputs.msi_file }}"
                    body: ${{ steps.release_notes.outputs.notes }}
                    #tag: ${{ needs.package-deb.outputs.release_version }}-rc${{ github.run_number }}
                    tag: ${{ needs.package-deb.outputs.release_version }}
                    prerelease: false   # beta, rc
                    draft: true         # confirmation in the UI
                    replacesArtifacts: true
                    #generateReleaseNotes: true