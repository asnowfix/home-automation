name: Package and Release
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
    workflow_dispatch:
        inputs:
            previous:
                description: 'Previous ref/tag'
                required: true
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
    package-deb:
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.version.outputs.release }}
            deb_file: ${{ steps.build-deb.outputs.file_name }}
        steps:
            -
                name: Install jq
                uses: awalsh128/cache-apt-pkgs-action@latest
                with:
                    packages: jq
            -
                name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
                    ref: ${{ github.event.ref }}
            -
                name: Setup Go
                uses: actions/setup-go@v5
                with:
                    go-version: '1.23.x'
            -
                id: go-releaser
                name: Run GoReleaser
                uses: goreleaser/goreleaser-action@v6
                with:
                    # either 'goreleaser' (default) or 'goreleaser-pro'
                    distribution: goreleaser
                    # 'latest', 'nightly', or a semver
                    version: '~> v2'
                    #args: release --rm-dist --clean --snapshot
                    args: release -f .goreleaser.yml --clean --snapshot
                # env:
                #     # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
                #     GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
            -
                name: Show artifacts
                run: echo '${{ steps.go-releaser.outputs.artifacts }}' | jq
            -
                id: version
                name: Get package version from latest (current or prior) tag
                run: |
                    # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
                    # [epoch:]upstream_version[-debian_revision]
                    #echo "upstream_version=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_revision=$(git describe | sed -E 's|^v*([0-9]+\.[0-9]+\.[0-9]+)-(.*)$|\2|g')" | tee -a $GITHUB_OUTPUT
                    #echo "debian_version=$(git describe | sed -E 's|^v*(.*)$|\1|g')" | tee -a $GITHUB_OUTPUT
                    #echo "::set-output name=release::$(git describe)"
                    echo "release=$(git describe)" | tee -a "$GITHUB_OUTPUT"
            -
                id: prepare-deb
                name: Prepare package content
                run: |
                    # main program
                    mkdir -p .debpkg/usr/bin
                    cp $(echo '${{ steps.go-releaser.outputs.artifacts }}' | jq -r '.[] | select(.name == "myhome") | .path') .debpkg/usr/bin/myhome

                    # systemd script as a shared file
                    mkdir -p .debpkg/usr/share/myhome
                    cp linux/debian/myhome.service .debpkg/usr/share/myhome/myhome.service

                    # create DEBIAN directory if you want to add other pre/post scripts
                    mkdir -p .debpkg/DEBIAN
                    cp linux/debian/postinst.sh .debpkg/DEBIAN/postinst
                    chmod +x .debpkg/DEBIAN/postinst
            -
                id: build-deb
                name: Build Debian Package
                uses: jiro4989/build-deb-action@v4
                with:
                    package: myhome
                    package_root: .debpkg
                    maintainer: Francois-Xavier 'FiX' KOWALSKI <fix.kowalski@gmail.com>
                    # `https://hub.docker.com/r/jiro4989/build-deb-action` wants format like version: refs/tags/v*.*.*
                    version: refs/tags/${{ steps.version.outputs.release }}
                    arch: 'arm64' # optional
                    depends: 'libc6 (>= 2.2.1), systemd' # optional
                    desc: 'MyHome Automation.' # optional
                    homepage: 'https://github.com/asnowfix/home-automation' # optional
            -
                name: Upload MyHome DEB as artifact
                uses: actions/upload-artifact@v4
                with:
                    name: deb_file
                    path: ${{ steps.build-deb.outputs.file_name }}
    package-msi:
        runs-on: windows-latest
        outputs:
            release_version: ${{ steps.version.outputs.release }}
            msi_file: ${{ steps.build-msi.outputs.msi_file }}
        steps:
            -
                name: Install winget
                uses: Cyberboss/install-winget@v1
            - 
                name: Install WiXToolset
                id: wix
                run: winget install --id WiXToolset.WiXToolset --version 3.14.1.8722 --source winget --disable-interactivity --accept-source-agreements --force
            - 
                id: go-msi
                name: Install go-msi
                run: choco install go-msi
            - 
                name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
                    ref: ${{ github.event.ref }}
            - 
                id: go
                name: Set up Go
                uses: actions/setup-go@v5
                with:
                    go-version: 1.23.0
            -
                id: version
                name: Get package version from latest (current or prior) tag
                run: |
                    $tag = git describe
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "release=$tag"
            - 
                id: build
                name: Build Windows Exectutable
                run: go build -o "myhome.exe" ".\\myhome"
            -
                id: build-msi
                name: Build Windows Installer MSI from exe file
                env:
                    Path: "C:\\Windows\\System32;$env:Path;C:\\Program Files\\go-msi;C:\\Program Files (x86)\\WiX Toolset v3.14\\bin"
                run: |
                    $out = New-Item -Type Directory -Path . -Name "msi_build"
                    $msi = "MyHome-${{ steps.version.outputs.release }}.msi"
                    go-msi make --msi "$out\$msi" --version ${{ steps.version.outputs.release }} --path .\wix.json --arch amd64 --license .\LICENSE --out $out --keep
                    Copy-Item "$out\$msi" -Destination "."
                    Get-Item $msi
                    Add-Content -Path $env:GITHUB_OUTPUT -Value "msi_file=$msi"
            -
                name: Upload MyHome MSI as artifact
                uses: actions/upload-artifact@v4
                with:
                    name: msi_file
                    path: ${{ steps.build-msi.outputs.msi_file }}

    release:
        runs-on: ubuntu-latest
        needs:
            - package-deb
            - package-msi
        steps:
            -
                if: github.event.inputs.previous == ''
                id: checkout
                name: Checkout
                uses: actions/checkout@v4
                with:
                  fetch-depth: 0    
            -
                if: github.event.inputs.previous == ''
                id: previous-tag
                name: Get latest ancestor tag
                run: |
                    echo "previous=$(git describe --tags --abbrev=0 HEAD^)" >> $env:GITHUB_OUTPUT
            -
                name: Generate Release Notes
                id: release_notes
                uses: gableroux/generate-github-release-notes@v0.1.2
                with:
                    repository: ${{ github.repository }}
                    base_tag: "${{ github.event.inputs.previous != '' ? github.event.inputs.previous : steps.previous-tag.outputs.previous }}"
                    head_tag: ${{ github.sha }}
                    github_token: ${{ secrets.GITHUB_TOKEN }}
            -
                name: Download MyHome MSI from package-msi
                uses: actions/download-artifact@v4
                with:
                    name: msi_file
                    #path: ${{ needs.package-msi.outputs.msi_file }}
            -
                name: Download MyHome DEB from package-deb
                uses: actions/download-artifact@v4
                with:
                    name: deb_file
                    #path: ${{ needs.package-deb.outputs.deb_file }}
            -
                name: List files in workspace
                run: ls -al
            -
                name: Release
                id: release
                uses: ncipollo/release-action@v1
                with:
                    name: Release ${{ needs.package-deb.outputs.release_version }}
                    artifactErrorsFailBuild: true
                    artifacts: "${{ needs.package-deb.outputs.deb_file }},${{ needs.package-msi.outputs.msi_file }}"
                    body: ${{ steps.release_notes.outputs.notes }}
                    #tag: ${{ needs.package-deb.outputs.release_version }}-rc${{ github.run_number }}
                    tag: ${{ needs.package-deb.outputs.release_version }}
                    prerelease: false   # beta, rc
                    draft: true         # confirmation in the UI
                    replacesArtifacts: true
                    #generateReleaseNotes: true